name: Trivy Security Scans

on:
  pull_request:
  push:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  trivy-scans:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Cache do banco de CVEs do Trivy (acelera bastante)
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/lockfiles-go-here-if-any') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      # 1) Dockerfile — misconfig (config scan) → SARIF
      - name: Trivy Dockerfile (misconfig)
        run: |
          trivy config --format sarif --output trivy-dockerfile.sarif Dockerfile || true

      - name: Upload SARIF (Dockerfile)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-dockerfile.sarif

      # 2) Filesystem do repo → vulnerabilidades e segredos (onde aplicável)
      - name: Trivy Filesystem (repo)
        run: |
          trivy fs --scanners vuln,secret,misconfig \
            --format sarif --output trivy-fs.sarif . || true

      - name: Upload SARIF (Filesystem)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      # 3) Construir imagem para escanear (reutiliza seu Dockerfile)
      - name: Build image (local only)
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/minha-api:trivy-${{ github.sha }}"
          docker build -t "$IMAGE" .

      # 3a) Image scan (CVEs) → SARIF
      - name: Trivy Image (vuln+misconfig+secret)
        id: trivy_image
        continue-on-error: true   # sempre gerar relatório; gate virá depois
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/minha-api:trivy-${{ github.sha }}"
          trivy image --scanners vuln,misconfig,secret \
            --severity HIGH,CRITICAL \
            --format sarif --output trivy-image.sarif "$IMAGE"
          # resumão em texto (opcional)
          trivy image --scanners vuln --severity HIGH,CRITICAL --format table "$IMAGE" | tee trivy-image.txt

      - name: Upload SARIF (Image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      # (Opcional) publicar resumo no Job
      - name: Summary (Image scan)
        if: always()
        run: |
          echo '### Trivy Image (HIGH/CRITICAL) Summary' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat trivy-image.txt >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      # 4) Gate de PR (falhar somente em pull_request se houver HIGH/CRITICAL)
      - name: Enforce on PRs (fail if HIGH/CRITICAL on image)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # Retorna código 1 se houver HIGH/CRITICAL
          IMAGE="ghcr.io/${{ github.repository_owner }}/minha-api:trivy-${{ github.sha }}"
          trivy image --scanners vuln --severity HIGH,CRITICAL --exit-code 1 "$IMAGE"
